// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Field {
  fieldId   String       @id @default(cuid())
  name      String
  location  String
  size      Float
  image1    String       @db.LongText
  image2    String       @db.LongText
  crops     Crop[]
  logs      Log[]
  equipment Equipment[]
  staff     FieldStaff[] // Many-to-Many relationship with Staff

  @@map("fields")
}

model Crop {
  cropId       String @id @default(cuid())
  commonName   String
  specificName String
  category     String
  season       String
  image1       String
  fieldId      String
  Field        Field  @relation(fields: [fieldId], references: [fieldId], onUpdate: Cascade, onDelete: Cascade)

  logs Log[] // One-to-Many relationship with Log

  @@map("crops")
}

model Staff {
  staffId     String       @id @default(cuid())
  firstName   String
  lastName    String
  gender      String
  designation String
  email       String       @unique
  dob         DateTime
  address     String
  contact     String
  joinDate    DateTime
  role        String
  vehicles    Vehicle[]
  equipment   Equipment[]
  user        User?
  logs        Log[] // One-to-Many relationship with Log
  fields      FieldStaff[] // Many-to-Many relationship with Field

  @@map("staff")
}

model Vehicle {
  vehicleId   String  @id @default(cuid())
  plateNumber String
  category    String
  fuelType    String
  status      String
  remarks     String
  staffId     String?
  Staff       Staff?  @relation(fields: [staffId], references: [staffId], onUpdate: Cascade, onDelete: Cascade)

  @@map("vehicles")
}

model Equipment {
  equipmentId String  @id @default(cuid())
  type        String
  name        String
  status      String
  remarks     String
  fieldId     String?
  Field       Field?  @relation(fields: [fieldId], references: [fieldId], onUpdate: Cascade, onDelete: Cascade)
  staffId     String?
  Staff       Staff?  @relation(fields: [staffId], references: [staffId], onUpdate: Cascade, onDelete: Cascade)

  @@map("equipment") // Maps the model to the "equipment" table in the database
}

model Log {
  logId      String   @id @default(cuid())
  logDetails String
  date       DateTime
  image2     String
  status     String
  cropId     String? // Log is related to one or zero Crop
  fieldId    String? // Log is related to one or zero Field
  staffId    String // Log is related to one  Staff
  Crop       Crop?    @relation(fields: [cropId], references: [cropId], onUpdate: Cascade, onDelete: Cascade)
  Field      Field?   @relation(fields: [fieldId], references: [fieldId], onUpdate: Cascade, onDelete: Cascade)
  Staff      Staff?   @relation(fields: [staffId], references: [staffId], onUpdate: Cascade, onDelete: Cascade)

  @@map("logs")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  role     String
  staffId  String @unique
  Staff    Staff  @relation(fields: [staffId], references: [staffId], onDelete: Cascade, onUpdate: Cascade)

  @@map("users")
}

model FieldStaff {
  fieldId String
  staffId String
  Field   Field  @relation(fields: [fieldId], references: [fieldId], onUpdate: Cascade, onDelete: Cascade)
  Staff   Staff  @relation(fields: [staffId], references: [staffId], onDelete: Cascade, onUpdate: Cascade)

  @@id([fieldId, staffId])
  @@map("field_staff")
}
